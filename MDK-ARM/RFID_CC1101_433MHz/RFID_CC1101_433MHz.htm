<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [RFID_CC1101_433MHz\RFID_CC1101_433MHz.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image RFID_CC1101_433MHz\RFID_CC1101_433MHz.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Aug 17 14:18:37 2020
<BR><P>
<H3>Maximum Stack Usage =        188 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USART2_IRQHandler &rArr; Error_Callback &rArr; MX_USART2_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[13]">LPTIM1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[1e]">RNG_LPUART1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l052xx.o(.text)
 <LI><a href="#[16]">TIM21_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[17]">TIM22_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[14]">TIM2_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[15]">TIM6_DAC_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from stm32l0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[1f]">USB_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l052xx.o(.text) referenced from startup_stm32l052xx.o(RESET)
 <LI><a href="#[22]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l052xx.o(.text)
 <LI><a href="#[23]">fputc</a> from usart.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[20]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[24]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[9e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[9f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l052xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>ADXL362RegisterRead</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, adxl362.o(i.ADXL362RegisterRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADXL362RegisterRead &rArr; SpiFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFunction
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Message
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPacket
</UL>

<P><STRONG><a name="[30]"></a>ADXL362RegisterWrite</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, adxl362.o(i.ADXL362RegisterWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADXL362RegisterWrite &rArr; SpiFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFunction
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_ReInit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_Init
</UL>

<P><STRONG><a name="[31]"></a>ADXL362_Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, adxl362.o(i.ADXL362_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADXL362_Init &rArr; ADXL362RegisterWrite &rArr; SpiFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initial
</UL>

<P><STRONG><a name="[33]"></a>ADXL362_ReInit</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, adxl362.o(i.ADXL362_ReInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ADXL362_ReInit &rArr; ADXL362RegisterWrite &rArr; SpiFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPacket
</UL>

<P><STRONG><a name="[94]"></a>Activate_SPI</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, spi.o(i.Activate_SPI))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initial
</UL>

<P><STRONG><a name="[34]"></a>Activate_USART2_RXIT</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.Activate_USART2_RXIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Activate_USART2_RXIT
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_RXNE
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_ERROR
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initial
</UL>

<P><STRONG><a name="[8b]"></a>CC1101CalcRSSI_dBm</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cc1101.o(i.CC1101CalcRSSI_dBm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CC1101CalcRSSI_dBm
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RecvHandler
</UL>

<P><STRONG><a name="[37]"></a>CC1101ClrRXBuff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cc1101.o(i.CC1101ClrRXBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CC1101ClrRXBuff &rArr; CC1101SetIdle &rArr; CC1101WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteCmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101RecPacket
</UL>

<P><STRONG><a name="[3a]"></a>CC1101ClrTXBuff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cc1101.o(i.CC1101ClrTXBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CC1101ClrTXBuff &rArr; CC1101SetIdle &rArr; CC1101WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteCmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SendPacket
</UL>

<P><STRONG><a name="[3b]"></a>CC1101GetRXCnt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cc1101.o(i.CC1101GetRXCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CC1101GetRXCnt &rArr; CC1101ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101RecPacket
</UL>

<P><STRONG><a name="[3d]"></a>CC1101Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cc1101.o(i.CC1101Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CC1101Init &rArr; CC1101SetAddress &rArr; CC1101WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteReg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteMultiReg
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetSYNC
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetAddress
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIDInitial
</UL>

<P><STRONG><a name="[43]"></a>CC1101ReadMultiReg</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, cc1101.o(i.CC1101ReadMultiReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CC1101ReadMultiReg
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ExchangeByte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101RecPacket
</UL>

<P><STRONG><a name="[45]"></a>CC1101ReadReg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cc1101.o(i.CC1101ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CC1101ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ExchangeByte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetAddress
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SendPacket
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101RecPacket
</UL>

<P><STRONG><a name="[3c]"></a>CC1101ReadStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cc1101.o(i.CC1101ReadStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CC1101ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ExchangeByte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101GetRXCnt
</UL>

<P><STRONG><a name="[46]"></a>CC1101RecPacket</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cc1101.o(i.CC1101RecPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CC1101RecPacket &rArr; CC1101ReadMultiReg
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ReadReg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ReadMultiReg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101GetRXCnt
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ClrRXBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RecvHandler
</UL>

<P><STRONG><a name="[3e]"></a>CC1101Reset</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, cc1101.o(i.CC1101Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CC1101Reset &rArr; CC1101WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101Init
</UL>

<P><STRONG><a name="[47]"></a>CC1101SendPacket</STRONG> (Thumb, 220 bytes, Stack size 72 bytes, cc1101.o(i.CC1101SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CC1101SendPacket &rArr; CC1101WriteMultiReg
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteReg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteMultiReg
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetTRMode
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ReadReg
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ClrTXBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPacket
</UL>

<P><STRONG><a name="[40]"></a>CC1101SetAddress</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cc1101.o(i.CC1101SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CC1101SetAddress &rArr; CC1101WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteReg
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101Init
</UL>

<P><STRONG><a name="[38]"></a>CC1101SetIdle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cc1101.o(i.CC1101SetIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CC1101SetIdle &rArr; CC1101WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPacket
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIDInitial
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ClrTXBuff
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ClrRXBuff
</UL>

<P><STRONG><a name="[41]"></a>CC1101SetSYNC</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cc1101.o(i.CC1101SetSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CC1101SetSYNC &rArr; CC1101WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101Init
</UL>

<P><STRONG><a name="[48]"></a>CC1101SetTRMode</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, cc1101.o(i.CC1101SetTRMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CC1101SetTRMode &rArr; CC1101WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteReg
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIDInitial
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SendPacket
</UL>

<P><STRONG><a name="[4a]"></a>CC1101SetWORMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cc1101.o(i.CC1101SetWORMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CC1101SetWORMode &rArr; CC1101WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteReg
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPacket
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIDInitial
</UL>

<P><STRONG><a name="[4b]"></a>CC1101WORInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cc1101.o(i.CC1101WORInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CC1101WORInit &rArr; CC1101WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPacket
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIDInitial
</UL>

<P><STRONG><a name="[39]"></a>CC1101WriteCmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cc1101.o(i.CC1101WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CC1101WriteCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ExchangeByte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetWORMode
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetTRMode
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetIdle
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101Reset
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ClrTXBuff
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ClrRXBuff
</UL>

<P><STRONG><a name="[42]"></a>CC1101WriteMultiReg</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cc1101.o(i.CC1101WriteMultiReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CC1101WriteMultiReg
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ExchangeByte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SendPacket
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101Init
</UL>

<P><STRONG><a name="[3f]"></a>CC1101WriteReg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cc1101.o(i.CC1101WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CC1101WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ExchangeByte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WORInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetWORMode
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetTRMode
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetSYNC
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetAddress
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SendPacket
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101Init
</UL>

<P><STRONG><a name="[4c]"></a>DATAEEPROM_Program</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, main.o(i.DATAEEPROM_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DATAEEPROM_Program &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initial
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DeviceInfo
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPacket
</UL>

<P><STRONG><a name="[8e]"></a>DATAEEPROM_Read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.DATAEEPROM_Read))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initial
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DeviceInfo
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPacket
</UL>

<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag_0_31
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag_0_31
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>Error_Callback</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, usart.o(i.Error_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = Error_Callback &rArr; MX_USART2_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_DeInit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_RXNE
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableIT_ERROR
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Program
</UL>

<P><STRONG><a name="[59]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32l0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
</UL>

<P><STRONG><a name="[95]"></a>Get_SerialNum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.Get_SerialNum))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initial
</UL>

<P><STRONG><a name="[32]"></a>HAL_Delay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Message
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPacket
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_ReInit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_Init
</UL>

<P><STRONG><a name="[52]"></a>HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Program
</UL>

<P><STRONG><a name="[50]"></a>HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Program
</UL>

<P><STRONG><a name="[4f]"></a>HAL_FLASHEx_DATAEEPROM_Erase</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Program
</UL>

<P><STRONG><a name="[53]"></a>HAL_FLASHEx_DATAEEPROM_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Program
</UL>

<P><STRONG><a name="[51]"></a>HAL_FLASHEx_DATAEEPROM_Program</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Program
</UL>

<P><STRONG><a name="[4d]"></a>HAL_FLASHEx_DATAEEPROM_Unlock</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Program
</UL>

<P><STRONG><a name="[49]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RecvHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SendPacket
</UL>

<P><STRONG><a name="[2e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Message
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362RegisterWrite
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362RegisterRead
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteReg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteMultiReg
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteCmd
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101Reset
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ReadStatus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ReadReg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ReadMultiReg
</UL>

<P><STRONG><a name="[5a]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[91]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5c]"></a>HAL_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>HAL_InitTick</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[5e]"></a>HAL_MspInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[61]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[63]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 572 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[64]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[65]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[66]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1734 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[60]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>LL_EXTI_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig_0_31
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_0_31
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig_0_31
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableEvent_0_31
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[7d]"></a>LL_GPIO_Init</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, stm32l0xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[6e]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSIDIV
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[83]"></a>LL_SPI_Init</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, stm32l0xx_ll_spi.o(i.LL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[57]"></a>LL_USART_DeInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32l0xx_ll_usart.o(i.LL_USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Callback
</UL>

<P><STRONG><a name="[77]"></a>LL_USART_Init</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, stm32l0xx_ll_usart.o(i.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabled
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[79]"></a>MX_GPIO_Init</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSCFG_SetEXTISource
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>MX_IWDG_Init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, iwdg.o(i.MX_IWDG_Init))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>MX_SPI1_Init</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_SPI1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 218 bytes, Stack size 64 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MX_USART2_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Callback
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetHCLKClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[76]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetPCLK1ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[75]"></a>RCC_GetPCLK2ClockFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetPCLK2ClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[70]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32l0xx_ll_rcc.o(i.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSIDIV
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[87]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, stm32l0xx_ll_rcc.o(i.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSIDIV
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[88]"></a>RFIDInitial</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cc1101.o(i.RFIDInitial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RFIDInitial &rArr; CC1101Init &rArr; CC1101SetAddress &rArr; CC1101WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WORInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetWORMode
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetTRMode
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetIdle
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initial
</UL>

<P><STRONG><a name="[89]"></a>RF_RecvHandler</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, main.o(i.RF_RecvHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RF_RecvHandler &rArr; CC1101RecPacket &rArr; CC1101ReadMultiReg
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101RecPacket
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101CalcRSSI_dBm
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>RF_SendPacket</STRONG> (Thumb, 1506 bytes, Stack size 40 bytes, main.o(i.RF_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RF_SendPacket &rArr; CC1101SendPacket &rArr; CC1101WriteMultiReg
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Read
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Program
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_ReInit
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362RegisterRead
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WORInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetWORMode
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SetIdle
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>SPI_ExchangeByte</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, spi.o(i.SPI_ExchangeByte))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFunction
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteReg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteMultiReg
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101WriteCmd
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ReadStatus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ReadReg
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CC1101ReadMultiReg
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>Set_DeviceInfo</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, main.o(i.Set_DeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Set_DeviceInfo &rArr; DATAEEPROM_Program &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Read
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Program
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>Show_Message</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, main.o(i.Show_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Show_Message &rArr; ADXL362RegisterRead &rArr; SpiFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362RegisterRead
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>SpiFunction</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, spi.o(i.SpiFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpiFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ExchangeByte
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362RegisterWrite
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362RegisterRead
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>SystemClock_Config</STRONG> (Thumb, 142 bytes, Stack size 112 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>System_Initial</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, main.o(i.System_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = System_Initial &rArr; RFIDInitial &rArr; CC1101Init &rArr; CC1101SetAddress &rArr; CC1101WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activate_USART2_RXIT
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activate_SPI
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Read
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATAEEPROM_Program
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADXL362_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFIDInitial
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USART2_IRQHandler &rArr; Error_Callback &rArr; MX_USART2_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_CharReception_Callback
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l052xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>USART_CharReception_Callback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, usart.o(i.USART_CharReception_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_CharReception_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a8]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[8a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initial
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Message
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DeviceInfo
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RecvHandler
</UL>

<P><STRONG><a name="[8d]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPacket
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ab]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[23]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[20]"></a>main</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_IWDG_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Initial
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Message
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_DeviceInfo
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SendPacket
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RecvHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7c]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[80]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, gpio.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[7f]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, gpio.o(i.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[7b]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[7e]"></a>LL_SYSCFG_SetEXTISource</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(i.LL_SYSCFG_SetEXTISource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SYSCFG_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[81]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, gpio.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[84]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[36]"></a>LL_USART_EnableIT_ERROR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(i.LL_USART_EnableIT_ERROR))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Callback
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activate_USART2_RXIT
</UL>

<P><STRONG><a name="[35]"></a>LL_USART_EnableIT_RXNE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(i.LL_USART_EnableIT_RXNE))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Callback
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Activate_USART2_RXIT
</UL>

<P><STRONG><a name="[97]"></a>LL_USART_TransmitData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i.LL_USART_TransmitData8))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_CharReception_Callback
</UL>

<P><STRONG><a name="[85]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usart.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[55]"></a>LL_EXTI_ClearFlag_0_31</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.LL_EXTI_ClearFlag_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>LL_EXTI_IsActiveFlag_0_31</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.LL_EXTI_IsActiveFlag_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[62]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[6f]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_GetUSARTClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[71]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[72]"></a>LL_RCC_IsActiveFlag_HSIDIV</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_IsActiveFlag_HSIDIV))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[73]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[86]"></a>LL_RCC_MSI_GetRange</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_rcc.o(i.LL_RCC_MSI_GetRange))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[68]"></a>LL_EXTI_DisableEvent_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_DisableEvent_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[6a]"></a>LL_EXTI_DisableIT_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_DisableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[6b]"></a>LL_EXTI_EnableEvent_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_EnableEvent_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[6d]"></a>LL_EXTI_EnableFallingTrig_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_EnableFallingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[69]"></a>LL_EXTI_EnableIT_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_EnableIT_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[6c]"></a>LL_EXTI_EnableRisingTrig_0_31</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_ll_exti.o(i.LL_EXTI_EnableRisingTrig_0_31))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[78]"></a>LL_USART_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_ll_usart.o(i.LL_USART_IsEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[99]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
